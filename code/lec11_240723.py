import numpy as np

x = np.arange(33)


#기댓값
np.arange(33).sum()/33

##분산
#Var[x] = E[(X-E[X])^2]

# 가운데 먼저 풀어보자.
# Y = (X-E[X])^2
(x-16)**2

# Y의 확률 변수를 생각해보자.
np.unique((x-16)**2)


# 분산 = E[(X-E[X])^2]
np.unique((x-16)**2) * (2/33)
sum(np.unique((x-16)**2) * (2/33))
sum(((x-16)**2) * (1/33)) #이것도 됨.

#   곱하기 2/33은 왜 들어가고 유니크는 왜 들어감? 가운데 먼저 풀다보니까 그렇게 됨.
#   확률 변수(나올 수 있는 수)로 바꾸다 보니까 중복된 애들 겹쳐짐. 그리고 그 녀석들 두 번 나왔으니
#   원래는 각각 1/33의 확률이었는데 0 빼고 2/33으로 됨. 0은 계산에 의미 없으므로
#   유니크 명령어를 사용하여 확률 변수화 하였고 대신 나눗셈은 2/33으로 바뀐거임.

# E[X^2]
sum(x**2 * (1/33))

# Var(X) = E[X^2] - (E[X])^2
sum(x**2 * (1/33)) - sum(x * (1/33))**2


# 예제 0, 1, 2, 3 / 확률은 각각 1/6, 2/6, 2/6, 1/6임.
# 분산을 구해보자.
x = np.arange(4)
pro_x = np.array([1/6, 2/6, 2/6, 1/6]) #각각에 대응하는 값. #probability 확률이라는 뜻.

# 일준 방식식
mu = sum(x * pro_x) #기댓값
sum((x- mu)**2 * pro_x)
#분산은 0.916

# 다르게 구하려면
Ex = sum(x * pro_x)
Exx = sum(x ** 2 * pro_x) #아까 Y구했던 것처럼 안쪽부터 풀어본거임.
Exx - Ex**2

## 예제 2
# X = 0~98 까지 정수
# 확률은 1/2500, 2/2500, ... 48/2500, 49/2500, 48/2500, 47/2500,... 2/2500, 1/2500

x = np.arange(99)

arr1 = np.arange(1, 51, 1)
arr2 = np.arange(49, 0, -1)
prob_x = np.concatenate((arr1, arr2)) / 2500

mu = sum(x * prob_x)
(x-mu)**2
sum((x-mu)**2 * prob_x)

## 예제 3
x = np.array([0, 2, 4, 6])
prob_x = np.array([1/6, 2/6, 2/6, 1/6])
mu = sum(x * prob_x)
sum((x - mu)**2 * prob_x)

# 분산 이론
np.sqrt(9.52 ** 2 / 25) #표준편차


np.sqrt(9.52**2 /10)
